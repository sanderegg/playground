version: "3.7"
services:
  ops_traefik:
    # dns: 8.8.8.8
    image: traefik:v2.2.1
    init: true
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      # so that internal services are not picked up
      - "--providers.docker.constraints=!LabelRegex(`io.simcore.zone`, `*`)"
      - "--tracing=true"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        - traefik.http.middlewares.ops_sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        # basic authentication
        # Note: all dollar signs in the hash need to be doubled for escaping.
        # To create user:password pair, it's possible to use this command:
        # docker run --rm --entrypoint htpasswd registry:2.6 -nb user password | sed -e s/\\$/\\$\\$/g
        # echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
        - traefik.http.middlewares.ops_auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}
        # gzip compression
        - traefik.http.middlewares.ops_gzip.compress=true
        # ip whitelisting
        - traefik.http.middlewares.ops_whitelist_ips.ipwhitelist.sourcerange=0.0.0.0/1,128.0.0.0/2,192.0.0.0/3,224.0.0.0/4
        # traefik UI
        - traefik.http.routers.api.service=api@internal
        - traefik.http.routers.api.rule=Host(`${MONITORING_DOMAIN}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
        - traefik.http.routers.api.entrypoints=https
        - traefik.http.routers.api.tls=true
        - traefik.http.routers.api.middlewares=ops_whitelist_ips@docker, ops_gzip@docker
        - traefik.http.services.api.loadbalancer.server.port=8080

    networks:
      - public
      - monitored

  ops_whoami:
    # dns: 8.8.8.8
    image: "containous/whoami"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.whoami.loadbalancer.server.port=80
        - traefik.http.routers.whoami.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/whoami`)
        - traefik.http.routers.whoami.entrypoints=https
        - traefik.http.routers.whoami.tls=true
        - traefik.http.routers.whoami.middlewares=ops_whitelist_ips@docker, ops_gzip@docker
    networks:
      - public

networks:
  public:
    name: ${PUBLIC_NETWORK}
  monitored:
    name: ${MONITORED_NETWORK}
