version: "3.7"
services:
  traefik:
    # dns: 8.8.8.8
    image: traefik:v2.2.1
    init: true
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.forwardedHeaders.insecure"
      - "--entryPoints.simcore_api.address=:10081"
      - "--entryPoints.simcore_api.forwardedHeaders.insecure"
      - "--entryPoints.traefik_monitor.address=:8080"
      - "--entryPoints.traefik_monitor.forwardedHeaders.insecure"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=${SWARM_STACK_NAME}_default"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.constraints=Label(`io.simcore.zone`, `${TRAEFIK_SIMCORE_ZONE}`)"
      - "--tracing=true"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # external traefik
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.${SWARM_STACK_NAME}_simcore_http.loadbalancer.server.port=80
        - traefik.http.services.${SWARM_STACK_NAME}_simcore_api.loadbalancer.server.port=10081

        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.rule=Host(`${PUBLISHED_HOST_NAME}`) && PathPrefix(`/`)
        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.entrypoints=https
        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.tls=true
        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.middlewares=ops_gzip@docker, ops_sslheader@docker
        - traefik.http.routers.${SWARM_STACK_NAME}_simcore_http.service=${SWARM_STACK_NAME}_simcore_http

        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.rule=Host(`${PUBLISHED_HOST_NAME}`) && PathPrefix(`/`)
        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.entrypoints=simcore_api
        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.priority=1
        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.tls=true
        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.middlewares=ops_gzip@docker
        # - traefik.http.routers.${SWARM_STACK_NAME}_simcore_api.service=${SWARM_STACK_NAME}_simcore_api
    networks:
      - public
      - default

  traefik_api:
    # NOTE: this is a trick to allow to access the internal traefik REST API
    # list router like so: curl https://domain/api/http/routers | jq
    image: busybox:latest
    command: sleep 900000d
    networks:
      - default
    deploy:
      labels:
        # internal traefik
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # traefik UI
        - traefik.enable=true
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik_api.service=api@internal
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik_api.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik_api.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik_api.priority=2
        # - traefik.http.routers.${SWARM_STACK_NAME}_traefik_api.middlewares=${SWARM_STACK_NAME}_auth@docker, ${SWARM_STACK_NAME}_gzip@docker
        - traefik.http.services.${SWARM_STACK_NAME}_traefik_api.loadbalancer.server.port=8080
  whoami:
    image: "containous/whoami"
    networks:
      - default
    # NOTE: this service allow to better understand how the host gets forwarded inside the simcore stack
    deploy:
      labels:
        # internal traefik
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # basic authentication
        # To create user:password pair, it's possible to use this command:
        # docker run --rm --entrypoint htpasswd registry:2 -nb user password
        # admin:adminadmin
        - traefik.http.middlewares.${SWARM_STACK_NAME}_auth.basicauth.users=admin:$$apr1$$aaX0W.4I$$sNk3knnThfi7fHTXQa0Wx.
        # whoami
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_whoami.loadbalancer.server.port=80
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.rule=hostregexp(`{host:.+}`) && PathPrefix(`/whoami`)
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.priority=2
        # - traefik.http.routers.${SWARM_STACK_NAME}_whoami.middlewares=${SWARM_STACK_NAME}_auth@docker,${SWARM_STACK_NAME}_gzip@docker
networks:
  public:
    external: true
    name: ${PUBLIC_NETWORK}
  monitored:
    external: true
    name: ${MONITORED_NETWORK}
